name: Check Subscription Expirations

on:
  schedule:
    - cron: '0 21 * * 4'
    - cron: '0 9 * * 5'
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  check-subscriptions:
    runs-on: ubuntu-latest
    
    steps:
      - name: Create script directory
        run: mkdir -p scripts
      
      - name: Create subscription checker script
        run: |
          cat > scripts/check-subscriptions.js << 'EOL'
          const admin = require('firebase-admin');

          // Initialize Firebase Admin SDK
          const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
          admin.initializeApp({
            credential: admin.credential.cert(serviceAccount)
          });

          const db = admin.firestore();

          async function checkSubscriptions() {
            try {
              console.log('Starting to check user subscriptions...');
              
              const currentDate = new Date();
              console.log(`Current date: ${currentDate.toISOString()}`);
              
              // Query users with type "member"
              const usersSnapshot = await db.collection('users')
                .where('type', '==', 'member')
                .get();
                
              console.log(`Found ${usersSnapshot.size} members to check`);
              
              // Group users by expiration status
              const aboutToExpireUsers = [];
              const expiringInHoursUsers = [];
              const expiredUsers = [];
              
              // Process each user
              for (const userDoc of usersSnapshot.docs) {
                const userData = userDoc.data();
                
                // Skip users without expiration date 
                if (!userData.expirationDate ) {
                  console.log(`User ${userDoc.id} missing expiration date , skipping`);
                  continue;
                }
                
                // Calculate days remaining
                const expirationDate = new Date(userData.expirationDate.seconds * 1000);
                let daysRemaining = (expirationDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24);
                
                console.log(`User ${userDoc.id}: ${daysRemaining.toFixed(1)} days remaining`);
                
                // Check if subscription is about to expire or has expired
                if (daysRemaining < 6) {
                  if (daysRemaining > 1) {
                    // More than 1 day but less than 6 days remaining
                    aboutToExpireUsers.push({
                      subId: userData.id,
                      daysRemaining: Math.round(daysRemaining)
                    });
                  } else if (daysRemaining > 0.02083) { // About 30 minutes in days
                    // Less than 1 day but still active
                    const hoursRemaining = Math.round(daysRemaining * 24);
                    const minutesRemaining = Math.round((daysRemaining * 24 * 60) % 60);
                    expiringInHoursUsers.push({
                      subId: userData.id,
                      hoursRemaining,
                      minutesRemaining
                    });
                  } else {
                    // Already expired
                    expiredUsers.push({
                      subId: userData.id,
                      daysExpired: Math.round(Math.abs(daysRemaining))
                    });
                  }
                }
              }
              
              // Send notifications to each group
              await sendNotifications(aboutToExpireUsers, expiringInHoursUsers, expiredUsers);
              
              console.log('Finished checking subscriptions');
            } catch (error) {
              console.error('Error checking subscriptions:', error);
              process.exit(1);
            }
          }

          async function sendNotifications(aboutToExpireUsers, expiringInHoursUsers, expiredUsers) {
            try {
              // Send notifications to users with days remaining
              if (aboutToExpireUsers.length > 0) {
                const subIds = aboutToExpireUsers.map(user => user.subId);
                for (const user of aboutToExpireUsers) {
                  const message = `Votre abonnement bientôt expire dans ${user.daysRemaining} jour${user.daysRemaining !== 1 ? 's' : ''}.`;
                  await sendNotification([user.subId], 'Rappel d\'abonnement', message);
                }
              }
              
              // Send notifications to users with hours remaining
              if (expiringInHoursUsers.length > 0) {
                for (const user of expiringInHoursUsers) {
                  const message = `Votre abonnement expire dans ${user.hoursRemaining} heure${user.hoursRemaining !== 1 ? 's' : ''} et ${user.minutesRemaining} minute${user.minutesRemaining !== 1 ? 's' : ''}.`;
                  await sendNotification([user.subId], 'Rappel d\'abonnement', message);
                }
              }
              
              // Send notifications to users with expired subscriptions
              if (expiredUsers.length > 0) {
                for (const user of expiredUsers) {
                  const message = `Votre abonnement a expiré il y a ${user.daysExpired} jour${user.daysExpired !== 1 ? 's' : ''}. Veuillez renouveler pour continuer.`;
                  await sendNotification([user.subId], 'Abonnement expiré', message);
                }
              }
              
              console.log(`Sent notifications to ${aboutToExpireUsers.length + expiringInHoursUsers.length + expiredUsers.length} users`);
            } catch (error) {
              console.error('Error sending notifications:', error);
              throw error;
            }
          }

          async function sendNotification(subIds, title, message) {
            try {
              console.log(`Sending notification to ${subIds.length} users: "${title}" - "${message}"`);
              
              const response = await fetch('https://app.nativenotify.com/api/indie/group/notification', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  subIDs: subIds,
                  appId: parseInt(process.env.NATIVE_NOTIFY_APP_ID),
                  appToken: process.env.NATIVE_NOTIFY_APP_TOKEN,
                  title: title,
                  message: message,
                  pushData: {
                    notificationType: 'subscription',
                  },
                }),
              });
              
              
              console.log(`Notification sent successfully to ${subIds.join(', ')}:`,response?.data);
              return response?.data;
            } catch (error) {
              console.error(`Failed to send notification to ${subIds.join(', ')}:`, error);
              throw error;
            }
          }

          // Execute the main function
          checkSubscriptions()
            .then(() => {
              console.log('Process completed successfully');
              process.exit(0);
            })
            .catch((error) => {
              console.error('Process failed:', error);
              process.exit(1);
            });
          EOL
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install firebase-admin
          
      - name: Check subscriptions and send notifications
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          NATIVE_NOTIFY_APP_ID: ${{ secrets.NATIVE_NOTIFY_APP_ID }}
          NATIVE_NOTIFY_APP_TOKEN: ${{ secrets.NATIVE_NOTIFY_APP_TOKEN }}
        run: node scripts/check-subscriptions.js
